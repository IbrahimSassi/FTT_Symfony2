<?php

namespace Proxies\__CG__\FTT\AdminBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class MatchInfo extends \FTT\AdminBundle\Entity\MatchInfo implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'FTT\\AdminBundle\\Entity\\MatchInfo' . "\0" . 'id', '' . "\0" . 'FTT\\AdminBundle\\Entity\\MatchInfo' . "\0" . 'dateMatch', '' . "\0" . 'FTT\\AdminBundle\\Entity\\MatchInfo' . "\0" . 'typeMatch', '' . "\0" . 'FTT\\AdminBundle\\Entity\\MatchInfo' . "\0" . 'idArbitre', '' . "\0" . 'FTT\\AdminBundle\\Entity\\MatchInfo' . "\0" . 'idEvenement', '' . "\0" . 'FTT\\AdminBundle\\Entity\\MatchInfo' . "\0" . 'idJoueur1', '' . "\0" . 'FTT\\AdminBundle\\Entity\\MatchInfo' . "\0" . 'idJoueur2', '' . "\0" . 'FTT\\AdminBundle\\Entity\\MatchInfo' . "\0" . 'idJoueur3', '' . "\0" . 'FTT\\AdminBundle\\Entity\\MatchInfo' . "\0" . 'idJoueur4', '' . "\0" . 'FTT\\AdminBundle\\Entity\\MatchInfo' . "\0" . 'idStade'];
        }

        return ['__isInitialized__', '' . "\0" . 'FTT\\AdminBundle\\Entity\\MatchInfo' . "\0" . 'id', '' . "\0" . 'FTT\\AdminBundle\\Entity\\MatchInfo' . "\0" . 'dateMatch', '' . "\0" . 'FTT\\AdminBundle\\Entity\\MatchInfo' . "\0" . 'typeMatch', '' . "\0" . 'FTT\\AdminBundle\\Entity\\MatchInfo' . "\0" . 'idArbitre', '' . "\0" . 'FTT\\AdminBundle\\Entity\\MatchInfo' . "\0" . 'idEvenement', '' . "\0" . 'FTT\\AdminBundle\\Entity\\MatchInfo' . "\0" . 'idJoueur1', '' . "\0" . 'FTT\\AdminBundle\\Entity\\MatchInfo' . "\0" . 'idJoueur2', '' . "\0" . 'FTT\\AdminBundle\\Entity\\MatchInfo' . "\0" . 'idJoueur3', '' . "\0" . 'FTT\\AdminBundle\\Entity\\MatchInfo' . "\0" . 'idJoueur4', '' . "\0" . 'FTT\\AdminBundle\\Entity\\MatchInfo' . "\0" . 'idStade'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (MatchInfo $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getDateMatch()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateMatch', []);

        return parent::getDateMatch();
    }

    /**
     * {@inheritDoc}
     */
    public function getTypeMatch()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTypeMatch', []);

        return parent::getTypeMatch();
    }

    /**
     * {@inheritDoc}
     */
    public function getIdArbitre()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdArbitre', []);

        return parent::getIdArbitre();
    }

    /**
     * {@inheritDoc}
     */
    public function getIdEvenement()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdEvenement', []);

        return parent::getIdEvenement();
    }

    /**
     * {@inheritDoc}
     */
    public function getIdJoueur1()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdJoueur1', []);

        return parent::getIdJoueur1();
    }

    /**
     * {@inheritDoc}
     */
    public function getIdJoueur2()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdJoueur2', []);

        return parent::getIdJoueur2();
    }

    /**
     * {@inheritDoc}
     */
    public function getIdJoueur3()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdJoueur3', []);

        return parent::getIdJoueur3();
    }

    /**
     * {@inheritDoc}
     */
    public function getIdJoueur4()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdJoueur4', []);

        return parent::getIdJoueur4();
    }

    /**
     * {@inheritDoc}
     */
    public function getIdStade()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdStade', []);

        return parent::getIdStade();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function setDateMatch(\DateTime $dateMatch)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateMatch', [$dateMatch]);

        return parent::setDateMatch($dateMatch);
    }

    /**
     * {@inheritDoc}
     */
    public function setTypeMatch($typeMatch)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTypeMatch', [$typeMatch]);

        return parent::setTypeMatch($typeMatch);
    }

    /**
     * {@inheritDoc}
     */
    public function setIdArbitre(\FTT\AdminBundle\Entity\User $idArbitre)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdArbitre', [$idArbitre]);

        return parent::setIdArbitre($idArbitre);
    }

    /**
     * {@inheritDoc}
     */
    public function setIdEvenement(\FTT\AdminBundle\Entity\Evenement $idEvenement)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdEvenement', [$idEvenement]);

        return parent::setIdEvenement($idEvenement);
    }

    /**
     * {@inheritDoc}
     */
    public function setIdJoueur1(\FTT\AdminBundle\Entity\Joueur $idJoueur1)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdJoueur1', [$idJoueur1]);

        return parent::setIdJoueur1($idJoueur1);
    }

    /**
     * {@inheritDoc}
     */
    public function setIdJoueur2(\FTT\AdminBundle\Entity\Joueur $idJoueur2)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdJoueur2', [$idJoueur2]);

        return parent::setIdJoueur2($idJoueur2);
    }

    /**
     * {@inheritDoc}
     */
    public function setIdJoueur3(\FTT\AdminBundle\Entity\Joueur $idJoueur3)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdJoueur3', [$idJoueur3]);

        return parent::setIdJoueur3($idJoueur3);
    }

    /**
     * {@inheritDoc}
     */
    public function setIdJoueur4(\FTT\AdminBundle\Entity\Joueur $idJoueur4)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdJoueur4', [$idJoueur4]);

        return parent::setIdJoueur4($idJoueur4);
    }

    /**
     * {@inheritDoc}
     */
    public function setIdStade(\FTT\AdminBundle\Entity\Stade $idStade)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdStade', [$idStade]);

        return parent::setIdStade($idStade);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

}
