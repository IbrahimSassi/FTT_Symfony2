<?php

namespace Proxies\__CG__\FTT\AdminBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Joueur extends \FTT\AdminBundle\Entity\Joueur implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'FTT\\AdminBundle\\Entity\\Joueur' . "\0" . 'id', '' . "\0" . 'FTT\\AdminBundle\\Entity\\Joueur' . "\0" . 'nomJoueur', '' . "\0" . 'FTT\\AdminBundle\\Entity\\Joueur' . "\0" . 'prenomJoueur', '' . "\0" . 'FTT\\AdminBundle\\Entity\\Joueur' . "\0" . 'imageJoueur', '' . "\0" . 'FTT\\AdminBundle\\Entity\\Joueur' . "\0" . 'categorieJoueur', '' . "\0" . 'FTT\\AdminBundle\\Entity\\Joueur' . "\0" . 'typeJoueur', '' . "\0" . 'FTT\\AdminBundle\\Entity\\Joueur' . "\0" . 'classementNational', '' . "\0" . 'FTT\\AdminBundle\\Entity\\Joueur' . "\0" . 'classementInternational', '' . "\0" . 'FTT\\AdminBundle\\Entity\\Joueur' . "\0" . 'nbVictoires', '' . "\0" . 'FTT\\AdminBundle\\Entity\\Joueur' . "\0" . 'nbDefaite', '' . "\0" . 'FTT\\AdminBundle\\Entity\\Joueur' . "\0" . 'idClub'];
        }

        return ['__isInitialized__', '' . "\0" . 'FTT\\AdminBundle\\Entity\\Joueur' . "\0" . 'id', '' . "\0" . 'FTT\\AdminBundle\\Entity\\Joueur' . "\0" . 'nomJoueur', '' . "\0" . 'FTT\\AdminBundle\\Entity\\Joueur' . "\0" . 'prenomJoueur', '' . "\0" . 'FTT\\AdminBundle\\Entity\\Joueur' . "\0" . 'imageJoueur', '' . "\0" . 'FTT\\AdminBundle\\Entity\\Joueur' . "\0" . 'categorieJoueur', '' . "\0" . 'FTT\\AdminBundle\\Entity\\Joueur' . "\0" . 'typeJoueur', '' . "\0" . 'FTT\\AdminBundle\\Entity\\Joueur' . "\0" . 'classementNational', '' . "\0" . 'FTT\\AdminBundle\\Entity\\Joueur' . "\0" . 'classementInternational', '' . "\0" . 'FTT\\AdminBundle\\Entity\\Joueur' . "\0" . 'nbVictoires', '' . "\0" . 'FTT\\AdminBundle\\Entity\\Joueur' . "\0" . 'nbDefaite', '' . "\0" . 'FTT\\AdminBundle\\Entity\\Joueur' . "\0" . 'idClub'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Joueur $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getNomJoueur()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNomJoueur', []);

        return parent::getNomJoueur();
    }

    /**
     * {@inheritDoc}
     */
    public function getPrenomJoueur()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPrenomJoueur', []);

        return parent::getPrenomJoueur();
    }

    /**
     * {@inheritDoc}
     */
    public function getImageJoueur()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImageJoueur', []);

        return parent::getImageJoueur();
    }

    /**
     * {@inheritDoc}
     */
    public function getCategorieJoueur()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategorieJoueur', []);

        return parent::getCategorieJoueur();
    }

    /**
     * {@inheritDoc}
     */
    public function getTypeJoueur()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTypeJoueur', []);

        return parent::getTypeJoueur();
    }

    /**
     * {@inheritDoc}
     */
    public function getClassementNational()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getClassementNational', []);

        return parent::getClassementNational();
    }

    /**
     * {@inheritDoc}
     */
    public function getClassementInternational()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getClassementInternational', []);

        return parent::getClassementInternational();
    }

    /**
     * {@inheritDoc}
     */
    public function getNbVictoires()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNbVictoires', []);

        return parent::getNbVictoires();
    }

    /**
     * {@inheritDoc}
     */
    public function getNbDefaite()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNbDefaite', []);

        return parent::getNbDefaite();
    }

    /**
     * {@inheritDoc}
     */
    public function getIdClub()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdClub', []);

        return parent::getIdClub();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function setNomJoueur($nomJoueur)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNomJoueur', [$nomJoueur]);

        return parent::setNomJoueur($nomJoueur);
    }

    /**
     * {@inheritDoc}
     */
    public function setPrenomJoueur($prenomJoueur)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPrenomJoueur', [$prenomJoueur]);

        return parent::setPrenomJoueur($prenomJoueur);
    }

    /**
     * {@inheritDoc}
     */
    public function setImageJoueur($imageJoueur)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setImageJoueur', [$imageJoueur]);

        return parent::setImageJoueur($imageJoueur);
    }

    /**
     * {@inheritDoc}
     */
    public function setCategorieJoueur($categorieJoueur)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCategorieJoueur', [$categorieJoueur]);

        return parent::setCategorieJoueur($categorieJoueur);
    }

    /**
     * {@inheritDoc}
     */
    public function setTypeJoueur($typeJoueur)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTypeJoueur', [$typeJoueur]);

        return parent::setTypeJoueur($typeJoueur);
    }

    /**
     * {@inheritDoc}
     */
    public function setClassementNational($classementNational)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setClassementNational', [$classementNational]);

        return parent::setClassementNational($classementNational);
    }

    /**
     * {@inheritDoc}
     */
    public function setClassementInternational($classementInternational)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setClassementInternational', [$classementInternational]);

        return parent::setClassementInternational($classementInternational);
    }

    /**
     * {@inheritDoc}
     */
    public function setNbVictoires($nbVictoires)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNbVictoires', [$nbVictoires]);

        return parent::setNbVictoires($nbVictoires);
    }

    /**
     * {@inheritDoc}
     */
    public function setNbDefaite($nbDefaite)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNbDefaite', [$nbDefaite]);

        return parent::setNbDefaite($nbDefaite);
    }

    /**
     * {@inheritDoc}
     */
    public function setIdClub($idClub)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdClub', [$idClub]);

        return parent::setIdClub($idClub);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

}
